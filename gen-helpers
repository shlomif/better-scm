#!/usr/bin/env perl

use strict;
use warnings;

use File::Find::Object ();
use Path::Tiny         qw/ path /;

sub _run_cli_command
{
    my ( $cmd, $err ) = @_;

    if ( system(@$cmd) )
    {
        die $err;
    }
    return;
}

_run_cli_command( [ $^X, 'bin/my-cookiecutter.pl' ], 'cookiecutter failed.' );

if ( system( "gmake", "--silent", "-f", "lib/make/build-deps/build-deps.mak" ) )
{
    die "build-deps failed!";
}

my $DIR = "lib/make/";

my @docs_paths;
my @dirs_paths;
my @images_paths;
my $host = "src";
my $tree = File::Find::Object->new( {}, $host );

FIND_FILES:
while ( my $r = $tree->next_obj() )
{
    my $path = join "/", @{ $r->full_components() };
    if ( $r->is_file() )
    {
        if ( $path =~ s#\.x?html\K\.tt2\z##ms )
        {
            push @docs_paths, $path;
        }
        else
        {
            push @images_paths, $path;
        }
    }
    elsif ( $r->is_dir() )
    {
        if ( length($path) )
        {
            push @dirs_paths, $path;
        }
    }
}
@docs_paths   = sort @docs_paths;
@dirs_paths   = sort @dirs_paths;
@images_paths = sort @images_paths;

path("${DIR}/include.mak")->spew_utf8(
    map {
        my ( $key, $paths ) = @{$_};
        join( " ", uc( "SCM" . "_" . $key ), ":=", @$paths ) . "\n"
    } [ "images", \@images_paths, ],
    [ "dirs", \@dirs_paths, ],
    [ "docs", \@docs_paths, ],
);

path("${DIR}/tt2.txt")
    ->spew_raw( join "", ( ( map { "$_\n" } @docs_paths ), ) );

path('Makefile')->spew_utf8("include ${DIR}/main.mak\n");
_run_cli_command( [ "gmake", 'bulk-make-dirs' ], "gmake failed" );
